import{e as aa,a as d,f as k,t as sa,c as s,b as a}from"../chunks/disclose-version.BlBAdxPG.js";import{h as n}from"../chunks/html.CAZA5-yU.js";import{l as na,s as ta}from"../chunks/props.CsqvDH4B.js";import{M as ea}from"../chunks/mdsvex-blog.DGqGa5qN.js";var oa=sa('<p>As a maintainer of daisyUI, I help people on GitHub issues and GitHub discussions every day. I see a lot of people making this mistake when using Tailwind CSS. Itâ€™s so simple to avoid but I find it so common among developers.</p> <h2 id="the-mistake"><a aria-hidden="true" tabindex="-1" href="#the-mistake"><span class="mr-1 opacity-20 hover:opacity-60 text-base font-bold inline-block align-middle relative -mt-1">#</span></a>The mistake</h2> <p>Hereâ€™s how we simply use Tailwind CSS class names in HTML:</p> <pre class="language-html"><!></pre> <p>However it would be cool if we do some totally necessary engineering and make it more dynamic. So we do something like this:</p> <pre class="language-html"><!></pre> <p>You might even want to do the same thing with daisyUI class names:</p> <pre class="language-html"><!></pre> <p>Itâ€™s cool, right?<br> It even works in dev environment.</p> <p>Everything is fineâ€¦<br> ðŸ˜  until we build our app for production and you realize the color is not working anymore</p> <h2 id="why-it-doesnt-work"><a aria-hidden="true" tabindex="-1" href="#why-it-doesnt-work"><span class="mr-1 opacity-20 hover:opacity-60 text-base font-bold inline-block align-middle relative -mt-1">#</span></a>Why it doesnâ€™t work?</h2> <p>Tailwind CSS scans your HTML files and looks for class names. Then it generates a CSS file based on the class names it finds. Itâ€™s that simple. Because the string <code>bg-red-500</code> does not exist in <code>bg-&#123;&#123; color &#125;&#125;-500</code>, it simply wonâ€™t generate the CSS for it.</p> <p>Read more about <a href="https://tailwindcss.com/docs/content-configuration#dynamic-class-names" rel="nofollow" target="_blank">using dynamic class names with Tailwind CSS</a>.</p> <h2 id="but-it-was-working-in-dev-environment"><a aria-hidden="true" tabindex="-1" href="#but-it-was-working-in-dev-environment"><span class="mr-1 opacity-20 hover:opacity-60 text-base font-bold inline-block align-middle relative -mt-1">#</span></a>But it was working in dev environment!</h2> <p>Yes, it was working because you probably first had <code>bg-red-500</code> in your file, you saved the file and <code>.bg-red-500</code> class name got added to your CSS. Then you changed it to <code>bg-&#123;&#123; color &#125;&#125;-500</code> and saved the file again. <code>bg-red-500</code> is not in your HTML anymore, but itâ€™s still in your CSS file. So it works in dev environment, but not in production.</p> <h2 id="but-some-class-names-work-and-some-dont"><a aria-hidden="true" tabindex="-1" href="#but-some-class-names-work-and-some-dont"><span class="mr-1 opacity-20 hover:opacity-60 text-base font-bold inline-block align-middle relative -mt-1">#</span></a>But some class names work and some donâ€™t!</h2> <p>Probably because you used those class names the correct way (as a string like <code>bg-red-500</code>) in another file.</p> <h2 id="solutions"><a aria-hidden="true" tabindex="-1" href="#solutions"><span class="mr-1 opacity-20 hover:opacity-60 text-base font-bold inline-block align-middle relative -mt-1">#</span></a>Solutions</h2> <p>How to fix it?</p> <p>Simply <strong>do not</strong> use dynamic class names like <code>bg-&#123;&#123; color &#125;&#125;-500</code>. Make sure the whole class name as a string exists in your file.</p> <pre class="language-jsx"><!></pre> <p>If you really have to do that, You have 3 ways:</p> <h3 id="solution-1-add-the-class-names-somewhere-in-the-file"><a aria-hidden="true" tabindex="-1" href="#solution-1-add-the-class-names-somewhere-in-the-file"><span class="mr-1 opacity-20 hover:opacity-60 text-base font-bold inline-block align-middle relative -mt-1">#</span></a>Solution 1: Add the class names somewhere in the file</h3> <p>Map the required class names somewhere in your file. It can be an object, a comment or anything.</p> <h3 id="solution-2-a-safelist-file"><a aria-hidden="true" tabindex="-1" href="#solution-2-a-safelist-file"><span class="mr-1 opacity-20 hover:opacity-60 text-base font-bold inline-block align-middle relative -mt-1">#</span></a>Solution 2: A safelist file</h3> <p>List all the required class names in a safelist file and add it to your <code>tailwind.config.js</code> file as <code>content</code></p> <pre class="language-js"><!></pre> <p><code>./path/safelist.txt</code> file can be simply like this:</p> <pre class="language-txt"><!></pre> <h3 id="solution-3-safelist-config"><a aria-hidden="true" tabindex="-1" href="#solution-3-safelist-config"><span class="mr-1 opacity-20 hover:opacity-60 text-base font-bold inline-block align-middle relative -mt-1">#</span></a>Solution 3: Safelist config</h3> <p>Safelist all the required class names in your <code>tailwind.config.js</code> file.</p> <pre class="language-js"><!></pre> <p>You can also use regex patterns in safelist:</p> <pre class="language-js"><!></pre> <p>Read more about <a href="https://tailwindcss.com/docs/content-configuration#safelisting-classes" rel="nofollow" target="_blank">Tailwind CSS safelist</a>.</p>',1);const pa={title:"The most common mistake when using Tailwind CSS (and how to fix it)",desc:"While working on daisyUI, I see a lot of people making this mistake when using Tailwind CSS.",published:!0,date:"2023-9-14",author:"Pouya Saadeghi",thumbnail:"https://img.daisyui.com/images/blog/tailwind-mistake.jpg",tags:["Tailwind CSS"]};function da(g,m){const h=na(m,["children","$$slots","$$events"]);var t=aa(),v=k(t);ea(v,ta(()=>h,pa,{children:(b,la)=>{var e=oa(),f=k(e),y=a(a(f,!0)),w=a(a(y,!0)),o=a(a(w,!0)),_=s(o);n(_,()=>`<code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bg-red-500<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bg-green-500<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bg-blue-500<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code>`);var x=a(a(o,!0)),p=a(a(x,!0)),S=s(p);n(S,()=>'<code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bg-&#123;&#123; color &#125;&#125;-500<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code>');var j=a(a(p,!0)),l=a(a(j,!0)),T=s(l);n(T,()=>`<code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn btn-&#123;&#123; type &#125;&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
instead of
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn-primary<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code>`);var I=a(a(l,!0)),C=a(a(I,!0)),q=a(a(C,!0)),$=a(a(q,!0)),H=a(a($,!0)),M=a(a(H,!0)),L=a(a(M,!0)),Y=a(a(L,!0)),A=a(a(Y,!0)),B=a(a(A,!0)),P=a(a(B,!0)),U=a(a(P,!0)),i=a(a(U,!0)),z=s(i);n(z,()=>`<code class="language-jsx"><span class="token keyword">let</span> color <span class="token operator">=</span> <span class="token string">'bg-red-500'</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;&#123; color &#125;&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code>`);var G=a(a(i,!0)),R=a(a(G,!0)),W=a(a(R,!0)),E=a(a(W,!0)),D=a(a(E,!0)),c=a(a(D,!0)),F=s(c);n(F,()=>`<code class="language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token literal-property property">content</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"./path/safelist.txt"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">&#125;</span></code>`);var J=a(a(c,!0)),r=a(a(J,!0)),K=s(r);n(K,()=>`<code class="language-txt">bg-red-500
bg-green-500
bg-blue-500</code>`);var N=a(a(r,!0)),O=a(a(N,!0)),u=a(a(O,!0)),Q=s(u);n(Q,()=>`<code class="language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token literal-property property">content</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"./pages/**/*.&#123;html,js&#125;"</span><span class="token punctuation">,</span> <span class="token string">"./components/**/*.&#123;html,js&#125;"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token comment">// ...</span>
  <span class="token literal-property property">safelist</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"bg-red-500"</span><span class="token punctuation">,</span> <span class="token string">"bg-green-500"</span><span class="token punctuation">,</span> <span class="token string">"bg-blue-500"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">&#125;</span></code>`);var V=a(a(u,!0)),X=a(a(V,!0)),Z=s(X);n(Z,()=>`<code class="language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token literal-property property">content</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"./pages/**/*.&#123;html,js&#125;"</span><span class="token punctuation">,</span> <span class="token string">"./components/**/*.&#123;html,js&#125;"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token comment">// ...</span>
  <span class="token literal-property property">safelist</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token string">"bg-teal-700"</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#123;</span>
      <span class="token literal-property property">pattern</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">bg-(red|green|blue)-(400|500|600)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">&#125;</span></code>`),d(b,e)},$$slots:{default:!0}})),d(g,t)}export{da as component};
